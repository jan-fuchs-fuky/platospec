# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `platospec.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module PlatoSpec
_M_PlatoSpec = Ice.openModule('PlatoSpec')
__name__ = 'PlatoSpec'

if 'TelescopeGlobalState' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopeGlobalState = Ice.createTempClass()
    class TelescopeGlobalState(object):
        def __init__(self, telescope=0, dome=0, slit=0, mirror_cover=0, focus=0, status_bits=0, error_bits=0):
            self.telescope = telescope
            self.dome = dome
            self.slit = slit
            self.mirror_cover = mirror_cover
            self.focus = focus
            self.status_bits = status_bits
            self.error_bits = error_bits

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.telescope)
            _h = 5 * _h + Ice.getHash(self.dome)
            _h = 5 * _h + Ice.getHash(self.slit)
            _h = 5 * _h + Ice.getHash(self.mirror_cover)
            _h = 5 * _h + Ice.getHash(self.focus)
            _h = 5 * _h + Ice.getHash(self.status_bits)
            _h = 5 * _h + Ice.getHash(self.error_bits)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PlatoSpec.TelescopeGlobalState):
                return NotImplemented
            else:
                if self.telescope is None or other.telescope is None:
                    if self.telescope != other.telescope:
                        return (-1 if self.telescope is None else 1)
                else:
                    if self.telescope < other.telescope:
                        return -1
                    elif self.telescope > other.telescope:
                        return 1
                if self.dome is None or other.dome is None:
                    if self.dome != other.dome:
                        return (-1 if self.dome is None else 1)
                else:
                    if self.dome < other.dome:
                        return -1
                    elif self.dome > other.dome:
                        return 1
                if self.slit is None or other.slit is None:
                    if self.slit != other.slit:
                        return (-1 if self.slit is None else 1)
                else:
                    if self.slit < other.slit:
                        return -1
                    elif self.slit > other.slit:
                        return 1
                if self.mirror_cover is None or other.mirror_cover is None:
                    if self.mirror_cover != other.mirror_cover:
                        return (-1 if self.mirror_cover is None else 1)
                else:
                    if self.mirror_cover < other.mirror_cover:
                        return -1
                    elif self.mirror_cover > other.mirror_cover:
                        return 1
                if self.focus is None or other.focus is None:
                    if self.focus != other.focus:
                        return (-1 if self.focus is None else 1)
                else:
                    if self.focus < other.focus:
                        return -1
                    elif self.focus > other.focus:
                        return 1
                if self.status_bits is None or other.status_bits is None:
                    if self.status_bits != other.status_bits:
                        return (-1 if self.status_bits is None else 1)
                else:
                    if self.status_bits < other.status_bits:
                        return -1
                    elif self.status_bits > other.status_bits:
                        return 1
                if self.error_bits is None or other.error_bits is None:
                    if self.error_bits != other.error_bits:
                        return (-1 if self.error_bits is None else 1)
                else:
                    if self.error_bits < other.error_bits:
                        return -1
                    elif self.error_bits > other.error_bits:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeGlobalState)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeGlobalState = IcePy.defineStruct('::PlatoSpec::TelescopeGlobalState', TelescopeGlobalState, (), (
        ('telescope', (), IcePy._t_int),
        ('dome', (), IcePy._t_int),
        ('slit', (), IcePy._t_int),
        ('mirror_cover', (), IcePy._t_int),
        ('focus', (), IcePy._t_int),
        ('status_bits', (), IcePy._t_int),
        ('error_bits', (), IcePy._t_int)
    ))

    _M_PlatoSpec.TelescopeGlobalState = TelescopeGlobalState
    del TelescopeGlobalState

if 'TelescopeOffsets' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopeOffsets = Ice.createTempClass()
    class TelescopeOffsets(object):
        def __init__(self, ra=0.0, dec=0.0):
            self.ra = ra
            self.dec = dec

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_PlatoSpec.TelescopeOffsets):
                return NotImplemented
            else:
                if self.ra != other.ra:
                    return False
                if self.dec != other.dec:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeOffsets)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeOffsets = IcePy.defineStruct('::PlatoSpec::TelescopeOffsets', TelescopeOffsets, (), (
        ('ra', (), IcePy._t_double),
        ('dec', (), IcePy._t_double)
    ))

    _M_PlatoSpec.TelescopeOffsets = TelescopeOffsets
    del TelescopeOffsets

if 'TelescopeUserSpeeds' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopeUserSpeeds = Ice.createTempClass()
    class TelescopeUserSpeeds(object):
        def __init__(self, ra=0.0, dec=0.0, active=0):
            self.ra = ra
            self.dec = dec
            self.active = active

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_PlatoSpec.TelescopeUserSpeeds):
                return NotImplemented
            else:
                if self.ra != other.ra:
                    return False
                if self.dec != other.dec:
                    return False
                if self.active != other.active:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeUserSpeeds)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeUserSpeeds = IcePy.defineStruct('::PlatoSpec::TelescopeUserSpeeds', TelescopeUserSpeeds, (), (
        ('ra', (), IcePy._t_double),
        ('dec', (), IcePy._t_double),
        ('active', (), IcePy._t_int)
    ))

    _M_PlatoSpec.TelescopeUserSpeeds = TelescopeUserSpeeds
    del TelescopeUserSpeeds

if 'TelescopeCoordinates' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopeCoordinates = Ice.createTempClass()
    class TelescopeCoordinates(object):
        def __init__(self, ra='', dec='', position=0):
            self.ra = ra
            self.dec = dec
            self.position = position

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ra)
            _h = 5 * _h + Ice.getHash(self.dec)
            _h = 5 * _h + Ice.getHash(self.position)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PlatoSpec.TelescopeCoordinates):
                return NotImplemented
            else:
                if self.ra is None or other.ra is None:
                    if self.ra != other.ra:
                        return (-1 if self.ra is None else 1)
                else:
                    if self.ra < other.ra:
                        return -1
                    elif self.ra > other.ra:
                        return 1
                if self.dec is None or other.dec is None:
                    if self.dec != other.dec:
                        return (-1 if self.dec is None else 1)
                else:
                    if self.dec < other.dec:
                        return -1
                    elif self.dec > other.dec:
                        return 1
                if self.position is None or other.position is None:
                    if self.position != other.position:
                        return (-1 if self.position is None else 1)
                else:
                    if self.position < other.position:
                        return -1
                    elif self.position > other.position:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeCoordinates)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeCoordinates = IcePy.defineStruct('::PlatoSpec::TelescopeCoordinates', TelescopeCoordinates, (), (
        ('ra', (), IcePy._t_string),
        ('dec', (), IcePy._t_string),
        ('position', (), IcePy._t_int)
    ))

    _M_PlatoSpec.TelescopeCoordinates = TelescopeCoordinates
    del TelescopeCoordinates

if 'TelescopeMechanicalCoordinates' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopeMechanicalCoordinates = Ice.createTempClass()
    class TelescopeMechanicalCoordinates(object):
        def __init__(self, ha='', da=''):
            self.ha = ha
            self.da = da

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.ha)
            _h = 5 * _h + Ice.getHash(self.da)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_PlatoSpec.TelescopeMechanicalCoordinates):
                return NotImplemented
            else:
                if self.ha is None or other.ha is None:
                    if self.ha != other.ha:
                        return (-1 if self.ha is None else 1)
                else:
                    if self.ha < other.ha:
                        return -1
                    elif self.ha > other.ha:
                        return 1
                if self.da is None or other.da is None:
                    if self.da != other.da:
                        return (-1 if self.da is None else 1)
                else:
                    if self.da < other.da:
                        return -1
                    elif self.da > other.da:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeMechanicalCoordinates)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeMechanicalCoordinates = IcePy.defineStruct('::PlatoSpec::TelescopeMechanicalCoordinates', TelescopeMechanicalCoordinates, (), (
        ('ha', (), IcePy._t_string),
        ('da', (), IcePy._t_string)
    ))

    _M_PlatoSpec.TelescopeMechanicalCoordinates = TelescopeMechanicalCoordinates
    del TelescopeMechanicalCoordinates

if 'TelescopeMeteoStatus' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopeMeteoStatus = Ice.createTempClass()
    class TelescopeMeteoStatus(object):
        def __init__(self, humidity=0, precipitation=0, status_word=0, meteo_alarms=0, wind_direction=0, wind_speed=0.0, brightness_east=0.0, brightness_north=0.0, brightness_west=0.0, brightness_south=0.0, brightness_max=0.0, temperature=0.0, atmospheric_pressure=0.0, pyrgeometer=0.0):
            self.humidity = humidity
            self.precipitation = precipitation
            self.status_word = status_word
            self.meteo_alarms = meteo_alarms
            self.wind_direction = wind_direction
            self.wind_speed = wind_speed
            self.brightness_east = brightness_east
            self.brightness_north = brightness_north
            self.brightness_west = brightness_west
            self.brightness_south = brightness_south
            self.brightness_max = brightness_max
            self.temperature = temperature
            self.atmospheric_pressure = atmospheric_pressure
            self.pyrgeometer = pyrgeometer

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_PlatoSpec.TelescopeMeteoStatus):
                return NotImplemented
            else:
                if self.humidity != other.humidity:
                    return False
                if self.precipitation != other.precipitation:
                    return False
                if self.status_word != other.status_word:
                    return False
                if self.meteo_alarms != other.meteo_alarms:
                    return False
                if self.wind_direction != other.wind_direction:
                    return False
                if self.wind_speed != other.wind_speed:
                    return False
                if self.brightness_east != other.brightness_east:
                    return False
                if self.brightness_north != other.brightness_north:
                    return False
                if self.brightness_west != other.brightness_west:
                    return False
                if self.brightness_south != other.brightness_south:
                    return False
                if self.brightness_max != other.brightness_max:
                    return False
                if self.temperature != other.temperature:
                    return False
                if self.atmospheric_pressure != other.atmospheric_pressure:
                    return False
                if self.pyrgeometer != other.pyrgeometer:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeMeteoStatus)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeMeteoStatus = IcePy.defineStruct('::PlatoSpec::TelescopeMeteoStatus', TelescopeMeteoStatus, (), (
        ('humidity', (), IcePy._t_int),
        ('precipitation', (), IcePy._t_int),
        ('status_word', (), IcePy._t_int),
        ('meteo_alarms', (), IcePy._t_int),
        ('wind_direction', (), IcePy._t_int),
        ('wind_speed', (), IcePy._t_double),
        ('brightness_east', (), IcePy._t_double),
        ('brightness_north', (), IcePy._t_double),
        ('brightness_west', (), IcePy._t_double),
        ('brightness_south', (), IcePy._t_double),
        ('brightness_max', (), IcePy._t_double),
        ('temperature', (), IcePy._t_double),
        ('atmospheric_pressure', (), IcePy._t_double),
        ('pyrgeometer', (), IcePy._t_double)
    ))

    _M_PlatoSpec.TelescopeMeteoStatus = TelescopeMeteoStatus
    del TelescopeMeteoStatus

if 'TelescopeStatus' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopeStatus = Ice.createTempClass()
    class TelescopeStatus(object):
        def __init__(self, utc=0.0, speed1=0.0, speed2=0.0, speed3=0.0, dec_screw_limit=0.0, dome_position=0.0, focus_position=0.0, correction_model=0, global_state=Ice._struct_marker, user_offsets=Ice._struct_marker, autoguider_offsets=Ice._struct_marker, user_speeds=Ice._struct_marker, coordinates=Ice._struct_marker, setpoint=Ice._struct_marker, axes=Ice._struct_marker, meteo_status=Ice._struct_marker):
            self.utc = utc
            self.speed1 = speed1
            self.speed2 = speed2
            self.speed3 = speed3
            self.dec_screw_limit = dec_screw_limit
            self.dome_position = dome_position
            self.focus_position = focus_position
            self.correction_model = correction_model
            if global_state is Ice._struct_marker:
                self.global_state = _M_PlatoSpec.TelescopeGlobalState()
            else:
                self.global_state = global_state
            if user_offsets is Ice._struct_marker:
                self.user_offsets = _M_PlatoSpec.TelescopeOffsets()
            else:
                self.user_offsets = user_offsets
            if autoguider_offsets is Ice._struct_marker:
                self.autoguider_offsets = _M_PlatoSpec.TelescopeOffsets()
            else:
                self.autoguider_offsets = autoguider_offsets
            if user_speeds is Ice._struct_marker:
                self.user_speeds = _M_PlatoSpec.TelescopeUserSpeeds()
            else:
                self.user_speeds = user_speeds
            if coordinates is Ice._struct_marker:
                self.coordinates = _M_PlatoSpec.TelescopeCoordinates()
            else:
                self.coordinates = coordinates
            if setpoint is Ice._struct_marker:
                self.setpoint = _M_PlatoSpec.TelescopeCoordinates()
            else:
                self.setpoint = setpoint
            if axes is Ice._struct_marker:
                self.axes = _M_PlatoSpec.TelescopeMechanicalCoordinates()
            else:
                self.axes = axes
            if meteo_status is Ice._struct_marker:
                self.meteo_status = _M_PlatoSpec.TelescopeMeteoStatus()
            else:
                self.meteo_status = meteo_status

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_PlatoSpec.TelescopeStatus):
                return NotImplemented
            else:
                if self.utc != other.utc:
                    return False
                if self.speed1 != other.speed1:
                    return False
                if self.speed2 != other.speed2:
                    return False
                if self.speed3 != other.speed3:
                    return False
                if self.dec_screw_limit != other.dec_screw_limit:
                    return False
                if self.dome_position != other.dome_position:
                    return False
                if self.focus_position != other.focus_position:
                    return False
                if self.correction_model != other.correction_model:
                    return False
                if self.global_state != other.global_state:
                    return False
                if self.user_offsets != other.user_offsets:
                    return False
                if self.autoguider_offsets != other.autoguider_offsets:
                    return False
                if self.user_speeds != other.user_speeds:
                    return False
                if self.coordinates != other.coordinates:
                    return False
                if self.setpoint != other.setpoint:
                    return False
                if self.axes != other.axes:
                    return False
                if self.meteo_status != other.meteo_status:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeStatus)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeStatus = IcePy.defineStruct('::PlatoSpec::TelescopeStatus', TelescopeStatus, (), (
        ('utc', (), IcePy._t_double),
        ('speed1', (), IcePy._t_double),
        ('speed2', (), IcePy._t_double),
        ('speed3', (), IcePy._t_double),
        ('dec_screw_limit', (), IcePy._t_double),
        ('dome_position', (), IcePy._t_double),
        ('focus_position', (), IcePy._t_double),
        ('correction_model', (), IcePy._t_int),
        ('global_state', (), _M_PlatoSpec._t_TelescopeGlobalState),
        ('user_offsets', (), _M_PlatoSpec._t_TelescopeOffsets),
        ('autoguider_offsets', (), _M_PlatoSpec._t_TelescopeOffsets),
        ('user_speeds', (), _M_PlatoSpec._t_TelescopeUserSpeeds),
        ('coordinates', (), _M_PlatoSpec._t_TelescopeCoordinates),
        ('setpoint', (), _M_PlatoSpec._t_TelescopeCoordinates),
        ('axes', (), _M_PlatoSpec._t_TelescopeMechanicalCoordinates),
        ('meteo_status', (), _M_PlatoSpec._t_TelescopeMeteoStatus)
    ))

    _M_PlatoSpec.TelescopeStatus = TelescopeStatus
    del TelescopeStatus

_M_PlatoSpec._t_Telescope = IcePy.defineValue('::PlatoSpec::Telescope', Ice.Value, -1, (), False, True, None, ())

if 'TelescopePrx' not in _M_PlatoSpec.__dict__:
    _M_PlatoSpec.TelescopePrx = Ice.createTempClass()
    class TelescopePrx(Ice.ObjectPrx):

        def run_ascol(self, s, context=None):
            return _M_PlatoSpec.Telescope._op_run_ascol.invoke(self, ((s, ), context))

        def run_ascolAsync(self, s, context=None):
            return _M_PlatoSpec.Telescope._op_run_ascol.invokeAsync(self, ((s, ), context))

        def begin_run_ascol(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_PlatoSpec.Telescope._op_run_ascol.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_run_ascol(self, _r):
            return _M_PlatoSpec.Telescope._op_run_ascol.end(self, _r)

        def get_status(self, context=None):
            return _M_PlatoSpec.Telescope._op_get_status.invoke(self, ((), context))

        def get_statusAsync(self, context=None):
            return _M_PlatoSpec.Telescope._op_get_status.invokeAsync(self, ((), context))

        def begin_get_status(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_PlatoSpec.Telescope._op_get_status.begin(self, ((), _response, _ex, _sent, context))

        def end_get_status(self, _r):
            return _M_PlatoSpec.Telescope._op_get_status.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_PlatoSpec.TelescopePrx.ice_checkedCast(proxy, '::PlatoSpec::Telescope', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_PlatoSpec.TelescopePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::PlatoSpec::Telescope'
    _M_PlatoSpec._t_TelescopePrx = IcePy.defineProxy('::PlatoSpec::Telescope', TelescopePrx)

    _M_PlatoSpec.TelescopePrx = TelescopePrx
    del TelescopePrx

    _M_PlatoSpec.Telescope = Ice.createTempClass()
    class Telescope(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::PlatoSpec::Telescope')

        def ice_id(self, current=None):
            return '::PlatoSpec::Telescope'

        @staticmethod
        def ice_staticId():
            return '::PlatoSpec::Telescope'

        def run_ascol(self, s, current=None):
            raise NotImplementedError("servant method 'run_ascol' not implemented")

        def get_status(self, current=None):
            raise NotImplementedError("servant method 'get_status' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_PlatoSpec._t_TelescopeDisp)

        __repr__ = __str__

    _M_PlatoSpec._t_TelescopeDisp = IcePy.defineClass('::PlatoSpec::Telescope', Telescope, (), None, ())
    Telescope._ice_type = _M_PlatoSpec._t_TelescopeDisp

    Telescope._op_run_ascol = IcePy.Operation('run_ascol', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Telescope._op_get_status = IcePy.Operation('get_status', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_PlatoSpec._t_TelescopeStatus, False, 0), ())

    _M_PlatoSpec.Telescope = Telescope
    del Telescope

# End of module PlatoSpec
